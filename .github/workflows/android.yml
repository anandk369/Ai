name: Android CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write  # 🔓 Needed for create-release to work

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: ⬇️ Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: ⚡️ Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🛠 Create local.properties with GEMINI_API_KEY
      run: echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > local.properties

    - name: 🔒 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 📥 Install Android SDK cmdline-tools
      run: |
        mkdir -p "$HOME/android-sdk/cmdline-tools"
        cd "$HOME/android-sdk/cmdline-tools"
        curl -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
        unzip tools.zip
        mv cmdline-tools latest
        cd ~

    - name: ⚙️ Set ANDROID_HOME and Install NDK
      env:
        ANDROID_HOME: ${{ github.workspace }}/android-sdk
        PATH: ${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:${{ github.workspace }}/android-sdk/platform-tools:${{ github.workspace }}/android-sdk/emulator:$PATH
      run: |
        yes | sdkmanager --sdk_root=${{ github.workspace }}/android-sdk --licenses
        sdkmanager "ndk;25.2.9519653"

    - name: 🧱 Build Debug APK
      run: ./gradlew assembleDebug

    - name: 🏗 Build Release APK
      run: ./gradlew assembleRelease

    - name: 📦 Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: 📦 Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk

    - name: 🚀 Create GitHub Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: 📤 Upload APK to GitHub Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release-unsigned.apk
        asset_name: MCQAutomation-v${{ github.run_number }}.apk
        asset_content_type: application/vnd.android.package-archive